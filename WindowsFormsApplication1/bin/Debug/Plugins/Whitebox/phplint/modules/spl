<?
/*. DOC  Standard PHP Library (SPL) Functions

	This modules is always available in PHP 5, but PHPLint holds it in a
	separate module for performace reasons since it is still seldom used.

	See: <a href="http://www.php.net/manual/en/book.spl.php">www.php.net/manual/en/book.spl.php</a>.
.*/

/*. if_php_ver_4 .*/

	The_spl_module_is_only_for_PHP_5.

/*. end_if_php_ver .*/

/*. require_module 'simplexml'; .*/

define('RIT_LEAVES_ONLY', 1);
/*. DOC <@deprecated use the proper class constant> .*/
define('RIT_SELF_FIRST', 1);
/*. DOC <@deprecated use the proper class constant> .*/
define('RIT_CHILD_FIRST', 1);
/*. DOC <@deprecated use the proper class constant> .*/
define('CIT_CALL_TOSTRING', 1);
/*. DOC <@deprecated use the proper class constant> .*/
define('CIT_CATCH_GET_CHILD', 1);
/*. DOC <@deprecated use the proper class constant> .*/


class LogicException extends Exception {}
class BadFunctionCallException extends LogicException {}
class DomainException extends LogicException {}
class InvalidArgumentException extends LogicException {}
class LengthException extends LogicException {}

class BadMethodCallException extends BadFunctionCallException {}

class RuntimeException extends Exception {}
class OutOfBoundsException extends RuntimeException {}
class OutOfRangeException extends RuntimeException {}
class OverflowException extends RuntimeException {}
class RangeException extends RuntimeException {}
class UnderflowException extends RuntimeException {}
class UnexpectedValueException extends RuntimeException {}


interface Traversable
{
}

interface IteratorAggregate extends Traversable
{
	/*. Traversable .*/ function getIterator()
		/*. throws Exception .*/;
}


interface Countable
{
	/*. int .*/ function count();
}

interface Iterator extends Traversable
{
	/*. mixed .*/ function current();
	/*. mixed .*/ function key();
	/*. void  .*/ function next();
	/*. void  .*/ function rewind();
	/*. bool  .*/ function valid();
}


interface OuterIterator extends Iterator
{
	/*. Iterator .*/ function getInnerIterator();
}

interface RecursiveIterator extends Iterator
{
	/*. mixed .*/ function getChildren();
	/*. bool  .*/ function hasChildren();
}

interface SeekableIterator extends Iterator
{
	/*. void .*/ function seek (/*. int .*/ $index) /*. throws OutOfBoundsException .*/;
}

interface ArrayAccess
{
	/*. bool  .*/ function offsetExists(/*. mixed .*/ $offset);
	/*. mixed .*/ function offsetGet(/*. mixed .*/ $offset);
	/*. void  .*/ function offsetSet(/*. mixed .*/ $offset,
		/*. string .*/ $value);
	/*. void  .*/ function offsetUnset(/*. mixed .*/ $offset);
}

/*. forward interface SplSubject{} .*/

interface SplObserver
{
	/*. void .*/ function update(SplSubject $subject);
}

interface SplSubject
{
	/*. void .*/ function attach(SplObserver $observer);
	/*. void .*/ function detach(SplObserver $observer);
	/*. void .*/ function notify();
}

interface Serializable
{
	/*. void .*/ function serialize();
	/*. void .*/ function unserialize(/*. string .*/ $serialized);
}


class ArrayIterator
implements ArrayAccess, SeekableIterator, Countable
{
	const ARRAY_AS_PROPS = 2;
	const STD_PROP_LIST = 1;
	/*. void  .*/ function __construct(/*. array .*/ $arr /*. , args .*/)
		/*. throws InvalidArgumentException .*/{}
	/*. void  .*/ function rewind(){}
	/*. void  .*/ function seek(/*. int .*/ $position)
		/*. throws OutOfBoundsException .*/{}
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
	/*. void  .*/ function next(){}
	/*. bool  .*/ function valid(){}

	# FIMXE: addind missing implementations:
	/*. int   .*/ function count(){}
	/*. bool  .*/ function offsetExists(/*. mixed .*/ $offset){}
	/*. mixed .*/ function offsetGet(/*. mixed .*/ $offset){}
	/*. void  .*/ function offsetSet(/*. mixed .*/ $offset, /*. mixed .*/ $value){}
	/*. void  .*/ function offsetUnset(/*. mixed .*/ $offset){}
}

class ArrayObject
implements IteratorAggregate, ArrayAccess, Countable
{
	/*. void  .*/ function __construct(/*. array .*/ $input)
		/*. throws InvalidArgumentException .*/{}
	/*. void  .*/ function append(/*. mixed .*/ $newval){}
	/*. int   .*/ function count(){}
	/*. Iterator .*/ function getIterator(){}
	/*. bool  .*/ function offsetExists(/*. mixed .*/ $index){}
	/*. mixed .*/ function offsetGet(/*. mixed .*/ $index){}
	/*. void  .*/ function offsetSet(/*. mixed .*/ $index, /*. mixed .*/ $newval){}
	/*. void  .*/ function offsetUnset(/*. mixed .*/ $index){}
}

class IteratorIterator
implements OuterIterator
{
	/*. void  .*/ function __construct (Traversable $iterator, /*. string .*/ $classname=null){}
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
	/*. void  .*/ function next(){}
	/*. void  .*/ function rewind(){}
	/*. bool  .*/ function valid(){}
	/*. Iterator .*/ function getInnerIterator(){}
}

abstract class FilterIterator
extends IteratorIterator
{
	/*. void .*/ function __construct(/*. Iterator .*/ $it) {parent::__construct($it);}
	/*. Iterator .*/ function getInnerIterator() {}
	/*. bool .*/ function valid(){}
	/*. mixed .*/ function key(){}
	/*. mixed .*/ function current(){}
	/*. void .*/ function rewind(){}
	/*. void .*/ function next(){}
}

abstract class RecursiveFilterIterator
extends FilterIterator
implements RecursiveIterator
{
	/*. mixed .*/ function getChildren(){}
	/*. bool  .*/ function hasChildren(){}
}

class ParentIterator
extends RecursiveFilterIterator
{
	/*. void .*/ function rewind(){}
	/*. void .*/ function next(){}
	/*. void .*/ function __construct(/*. RecursiveIterator .*/ $it){parent::__construct($it);}
	/*. bool .*/ function hasChildren(){}
	/*. ParentIterator .*/ function getChildren(){}
	/*. Iterator .*/ function getInnerIterator(){}

	# FIXME: adding missing implementations:
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
	/*. bool  .*/ function valid(){}
}

/*. forward class SplFileObject{} .*/

class SplFileInfo
{
	/*. void   .*/ function __construct( /*. string .*/ $file_name ){}
	/*. int    .*/ function getATime()
		/*. throws RuntimeException .*/ {}
	/*. string .*/ function getBasename(/*. args .*/){}
	/*. int    .*/ function getCTime()
		/*. throws RuntimeException .*/ {}
	/*. self   .*/ function getFileInfo(/*. args .*/){}
	/*. string .*/ function getFilename(){}
	/*. int    .*/ function getGroup()
		/*. throws RuntimeException .*/ {}
	/*. int    .*/ function getInode()
		/*. throws RuntimeException .*/ {}
	/*. string .*/ function getLinkTarget()
		/*. throws RuntimeException .*/ {}
	/*. int    .*/ function getMTime(){}
	/*. int    .*/ function getOwner()
		/*. throws RuntimeException .*/ {}
	/*. string .*/ function getPath(){}
	/*. self   .*/ function getPathInfo(/*. args .*/){}
	/*. string .*/ function getPathname(){}
	/*. int    .*/ function getPerms(){}
	/*. string .*/ function getRealPath(){}
	/*. int    .*/ function getSize(){}
	/*. string .*/ function getType()
		/*. throws RuntimeException .*/ {}
	/*. bool   .*/ function isDir(){}
	/*. bool   .*/ function isExecutable(){}
	/*. bool   .*/ function isFile(){}
	/*. bool   .*/ function isLink(){}
	/*. bool   .*/ function isReadable(){}
	/*. bool   .*/ function isWritable(){}
	/*. SplFileObject .*/ function openFile(/*. args .*/){}
	/*. void   .*/ function setFileClass(/*. args .*/){}
	/*. void   .*/ function setInfoClass(/*. args .*/){}
	/*. string .*/ function __toString(){}
}

class SplFileObject
extends SplFileInfo
implements RecursiveIterator, SeekableIterator
{
	/*. mixed .*/ function getChildren(){}
	/*. bool  .*/ function hasChildren(){}
	/*. void .*/ function seek (/*. int .*/ $index){}
}

class DirectoryIterator
extends SplFileInfo
implements Iterator
{
	/*. void .*/ function __construct(/*. string .*/ $path)
	{ parent::__construct($path); }
	/*. void .*/ function rewind(){}
	/*. string .*/ function key(){}
	/*. DirectoryIterator .*/ function current(){}
	/*. void .*/ function next(){}
	/*. bool .*/ function valid(){}
	/*. string .*/ function getPath(){}
	/*. string .*/ function getFilename(){}
	/*. string .*/ function getPathname(){}
	/*. string .*/ function Recursivekey(){}
	/*. bool .*/ function isDot(){}
	/*. int .*/ function getPerms(){}
	/*. int .*/ function getInode(){}
	/*. int .*/ function getSize(){}
	/*. int .*/ function getOwner(){}
	/*. int .*/ function getGroup(){}
	/*. int .*/ function getATime(){}
	/*. int .*/ function getMTime(){}
	/*. int .*/ function getCTime(){}
	/*. string .*/ function getType(){}
	/*. bool .*/ function isWritable(){}
	/*. bool .*/ function isReadable(){}
	/*. bool .*/ function isExecutable(){}
	/*. bool .*/ function isFile(){}
	/*. bool .*/ function isDir(){}
	/*. bool .*/ function isLink(){}
}

class FilesystemIterator
extends DirectoryIterator
implements SeekableIterator
{
	/*. void .*/ function __construct(/*. string .*/ $path /*. , args .*/)
	{ parent::__construct($path); }
	/*. FilesystemIterator .*/ function current(){}
	/*. int .*/ function getFlags(){}
	/*. string .*/ function key(){}
	/*. void .*/ function next(){}
	/*. void .*/ function rewind(){}
	/*. void .*/ function setFlags(/*. args .*/){}
	/*. void .*/ function seek(/*. int .*/ $position){}
}

class RecursiveDirectoryIterator
extends DirectoryIterator
implements RecursiveIterator
{
	/*. void .*/ function rewind(){}
	/*. void .*/ function next(){}
	/*. bool .*/ function hasChildren(/*. args .*/){}
	/*. object .*/ function getChildren(){}
	/*. string .*/ function key(){}

	# FIXME: adding missing implementations:
	/*. RecursiveDirectoryIterator .*/ function current(){}
	/*. bool  .*/ function valid(){}
}

class RecursiveIteratorIterator
implements OuterIterator
{
	const
		LEAVES_ONLY = 1,
		SELF_FIRST = 1,
		CHILD_FIRST = 1;

	/*. void .*/ function __construct(/*. RecursiveIterator .*/ $it /*., args .*/)
		/*. throws InvalidArgumentException .*/{}
	/*. void  .*/ function setMaxDepth(/*. int .*/ $max_depth)
		/*. throws OutOfRangeException .*/{}
	/*. void  .*/ function rewind(){}
	/*. bool  .*/ function valid(){}
	/*. mixed .*/ function key(){}
	/*. mixed .*/ function current(){}
	/*. void  .*/ function next(){}
	/*. int   .*/ function getDepth(){}
	/*. RecursiveIterator .*/ function getSubIterator(/*. args .*/){}
	/*. Iterator .*/ function getInnerIterator(){}
}

class LimitIterator
extends IteratorIterator
{
	/*. void .*/ function __construct(/*. Iterator .*/ $it /*., args .*/){parent::__construct($it);}
	/*. void .*/ function rewind(){}
	/*. bool .*/ function valid(){}
	/*. void .*/ function next(){}
	/*. void .*/ function seek(/*. int .*/ $position){}
	/*. int .*/ function getPosition(){}

	# FIXME: adding missing implementations:
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
}

class CachingIterator
extends IteratorIterator
implements ArrayAccess, Countable
{
	const
		CALL_TOSTRING = 1,
		CATCH_GET_CHILD = 16,
		TOSTRING_USE_KEY = 2,
		TOSTRING_USE_CURRENT = 4,
		TOSTRING_USE_INNER = 8,
		FULL_CACHE = 256;

	/*. void .*/ function __construct(/*. Iterator .*/ $it /*., args .*/){parent::__construct($it);}
	/*. void .*/ function rewind(){}
	/*. bool .*/ function valid(){}
	/*. void .*/ function next(){}
	/*. bool .*/ function hasNext(){}
	/*. string .*/ function __toString()
		/*. throws BadMethodCallException .*/{}
	/*. mixed .*/ function getCache(){}
	/*. int .*/ function getFlags(){}
	/*. Iterator .*/ function getInnerIterator(){}

	# FIXME: adding missing implementations:
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
	/*. int   .*/ function count(){}
	/*. bool  .*/ function offsetExists(/*. mixed .*/ $offset){}
	/*. mixed .*/ function offsetGet(/*. mixed .*/ $offset){}
	/*. void  .*/ function offsetSet(/*. mixed .*/ $offset, /*. mixed .*/ $value){}
	/*. void  .*/ function offsetUnset(/*. mixed .*/ $offset){}
}

class RecursiveCachingIterator
extends CachingIterator
implements RecursiveIterator
{
	/*. bool .*/ function hasChildren(){}
	/*. RecursiveCachingIterator .*/ function getChildren(){}

	# FIXME: adding missing implementations:
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
	/*. void  .*/ function next(){}
	/*. void  .*/ function rewind(){}
	/*. bool  .*/ function valid(){}
	/*. int   .*/ function count(){}
	/*. bool  .*/ function offsetExists(/*. mixed .*/ $offset){}
	/*. mixed .*/ function offsetGet(/*. mixed .*/ $offset){}
	/*. void  .*/ function offsetSet(/*. mixed .*/ $offset, /*. mixed .*/ $value){}
	/*. void  .*/ function offsetUnset(/*. mixed .*/ $offset){}
}

class RegexIterator
extends FilterIterator
{
	/*. void .*/ function __construct(/*. Iterator .*/ $it, /*. string .*/ $regex /*. , args .*/){parent::__construct($it);}
	/*. bool .*/ function accept(){}
	/*. bool .*/ function getMode(){}
	/*. bool .*/ function setMode(/*. int .*/ $new_mode)
		/*. throws InvalidArgumentException .*/{}
	/*. bool .*/ function getFlags(){}
	/*. bool .*/ function setFlags(/*. int .*/ $new_flags){}
}

class RecursiveRegexIterator
extends RegexIterator
implements RecursiveIterator
{
	/*. void .*/ function __construct(/*. RecursiveIterator .*/ $it, /*. string .*/ $regex /*. , args .*/){parent::__construct($it, $regex);}
	/*. bool  .*/ function hasChildren(){}
	/*. RecursiveRegexIterator .*/ function getChildren(){}
}


class SimpleXMLIterator
extends SimpleXMLElement
implements RecursiveIterator, Countable
{
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function getChildren(){}
	/*. bool .*/ function hasChildren(){}
	/*. mixed .*/ function key(){}
	/*. void .*/ function next(){}
	/*. void .*/ function rewind(){}
	/*. bool .*/ function valid(){}

	# FIXME: adding missing implementations:
	/*. int   .*/ function count(){}
}


class SplDoublyLinkedList
implements Iterator, ArrayAccess, Countable
{
	/*. void .*/ function __construct(){}
	/*. mixed .*/ function bottom(){}
	/*. int .*/ function count(){}
	/*. mixed .*/ function current(){}
	/*. int .*/ function getIteratorMode(){}
	/*. bool .*/ function isEmpty(){}
	/*. mixed .*/ function key(){}
	/*. void .*/ function next(){}
	/*. bool .*/ function offsetExists(/*. mixed .*/ $index){}
	/*. mixed .*/ function offsetGet(/*. mixed .*/ $index){}
	/*. void .*/ function offsetSet(/*. mixed .*/ $index, /*. mixed .*/ $newval){}
	/*. void .*/ function offsetUnset(/*. mixed .*/ $index){}
	/*. mixed .*/ function pop(){}
	/*. void .*/ function push(/*. mixed .*/ $value){}
	/*. void .*/ function rewind(){}
	/*. void .*/ function setIteratorMode(/*. int .*/ $mode)
		/*. throws RuntimeException .*/ {}
	/*. mixed .*/ function shift(){}
	/*. mixed .*/ function top(){}
	/*. void .*/ function unshift(/*. mixed .*/ $value){}
	/*. bool .*/ function valid(){}
}


class SplStack
extends SplDoublyLinkedList
{
	/*. void .*/ function __construct(){ parent::__construct(); }
	/*. void .*/ function setIteratorMode(/*. int .*/ $mode)
		/*. throws RuntimeException .*/ {}

	# FIXME: adding missing implementations:
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
	/*. void  .*/ function next(){}
	/*. void  .*/ function rewind(){}
	/*. bool  .*/ function valid(){}
	/*. int   .*/ function count(){}
	/*. bool  .*/ function offsetExists(/*. mixed .*/ $offset){}
	/*. mixed .*/ function offsetGet(/*. mixed .*/ $offset){}
	/*. void  .*/ function offsetSet(/*. mixed .*/ $offset, /*. mixed .*/ $value){}
	/*. void  .*/ function offsetUnset(/*. mixed .*/ $offset){}
}


class SplQueue
extends SplDoublyLinkedList
{
	/*. void .*/ function __construct(){ parent::__construct(); }
	/*. mixed .*/ function dequeue(){}
	/*. void .*/ function enqueue(/*. mixed .*/ $value){}
	/*. void .*/ function setIteratorMode(/*. int .*/ $mode)
		/*. throws RuntimeException .*/ {}

	# FIXME: adding missing implementations:
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
	/*. void  .*/ function next(){}
	/*. void  .*/ function rewind(){}
	/*. bool  .*/ function valid(){}
	/*. int   .*/ function count(){}
	/*. bool  .*/ function offsetExists(/*. mixed .*/ $offset){}
	/*. mixed .*/ function offsetGet(/*. mixed .*/ $offset){}
	/*. void  .*/ function offsetSet(/*. mixed .*/ $offset, /*. mixed .*/ $value){}
	/*. void  .*/ function offsetUnset(/*. mixed .*/ $offset){}
}


abstract class SplHeap
implements Iterator, Countable
{
	/*. void .*/ function __construct(){}
	abstract /*. int .*/ function compare(/*. mixed .*/ $value1, /*. mixed .*/ $value2);
	/*. int .*/ function count(){}
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function extract(){}
	/*. void .*/ function insert(/*. mixed .*/ $value){}
	/*. bool .*/ function isEmpty(){}
	/*. mixed .*/ function key(){}
	/*. void .*/ function next(){}
	/*. void .*/ function recoverFromCorruption(){}
	/*. void .*/ function rewind(){}
	/*. mixed .*/ function top(){}
	/*. bool .*/ function valid(){}
}


class SplMaxHeap
extends SplHeap
{
	/*. int .*/ function compare(/*. mixed .*/ $value1, /*. mixed .*/ $value2){}

	# FIXME: adding missing implementations:
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
	/*. void  .*/ function next(){}
	/*. void  .*/ function rewind(){}
	/*. bool  .*/ function valid(){}
	/*. int .*/ function count(){}
}


class SplMinHeap
extends SplHeap
{
	/*. int .*/ function compare(/*. mixed .*/ $value1, /*. mixed .*/ $value2){}

	# FIXME: adding missing implementations:
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
	/*. void  .*/ function next(){}
	/*. void  .*/ function rewind(){}
	/*. bool  .*/ function valid(){}
	/*. int .*/ function count(){}
}


class SplPriorityQueue
implements Iterator, Countable
{
	/*. void .*/ function __construct(){}
	/*. void .*/ function compare( /*. mixed .*/ $priority1 , /*. mixed .*/ $priority1 ){}
	/*. int .*/ function count(){}
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function extract(){}
	/*. void .*/ function insert( /*. mixed .*/ $value , /*. mixed .*/ $priority ){}
	/*. bool .*/ function isEmpty(){}
	/*. mixed .*/ function key(){}
	/*. void .*/ function next(){}
	/*. void .*/ function recoverFromCorruption(){}
	/*. void .*/ function rewind(){}
	/*. void .*/ function setExtractFlags( /*. int .*/ $flags ){}
	/*. mixed .*/ function top(){}
	/*. bool .*/ function valid(){}
}


class SplFixedArray
implements Iterator, ArrayAccess, Countable
/*. DOC --

WARNING: PHPLint is very strict in checking method signature, and the int type
does not match the overriden type mixed, so I had to change int into mixed here
and there. Involved methods are: key, offsetExists, offsetGet, offsetSet,
offsetUnset.
.*/
{
	/*. void .*/ function __construct(/*. int .*/ $size){}
	/*. int .*/ function count(){}
	/*. mixed .*/ function current(){}
	static /*. SplFixedArray .*/ function fromArray(/*. array .*/ $array_ /*., args .*/){}
	/*. int .*/ function getSize(){}
	#/*. int .*/ function key(){}
	/*. mixed .*/ function key(){}
	/*. void .*/ function next(){}
	#/*. bool .*/ function offsetExists(/*. int .*/ $index){}
	/*. bool .*/ function offsetExists(/*. mixed .*/ $index){}
	#/*. mixed .*/ function offsetGet(/*. int .*/ $index){}
	/*. mixed .*/ function offsetGet(/*. mixed .*/ $index){}
	#/*. void .*/ function offsetSet(/*. int .*/ $index, /*. mixed .*/ $newval){}
	/*. void .*/ function offsetSet(/*. mixed .*/ $index, /*. mixed .*/ $newval){}
	#/*. void .*/ function offsetUnset(/*. int .*/ $index){}
	/*. void .*/ function offsetUnset(/*. mixed .*/ $index){}
	/*. void .*/ function rewind(){}
	/*. int .*/ function setSize(/*. int .*/ $size){}
	/*. array .*/ function toArray(){}
	/*. bool .*/ function valid(){}
}


class SplObjectStorage
implements Countable, Iterator, Serializable {
	/*. void .*/ function addAll(/*. SplObjectStorage .*/ $storage){}
	/*.bool.*/ function contains(/*. object .*/ $obj){}
	/*.void.*/ function attach(/*. object .*/ $obj /*., args .*/){}
	/*.void.*/ function detach(/*. object .*/ $obj){}
	/*.int.*/ function count(){}
	/*. mixed .*/ function current(){}
	/*. mixed .*/ function key(){}
	/*. void  .*/ function next(){}
	/*. void  .*/ function rewind(){}
	/*. bool  .*/ function valid(){}
	/*. boolean .*/ function offsetExists(/*. object .*/ $object_){}
	/*. mixed .*/ function offsetGet(/*. object .*/ $object_){}
	/*. void .*/ function offsetSet(/*. object .*/ $object_, /*. mixed .*/ $info){}
	/*. void .*/ function offsetUnset(/*. object .*/ $object_){}
	/*. void .*/ function removeAll(/*. SplObjectStorage .*/ $storage){}
	/*. void .*/ function serialize(){}
	/*. void .*/ function unserialize(/*. string .*/ $serialized){}
}


/*. array[int]string .*/ function class_implements(/*. mixed .*/ $class_ /*. , args .*/){}
/*. array[int]string .*/ function class_parents(/*. mixed .*/ $class_ /*. , args .*/){}
/*. int .*/ function iterator_count(IteratorAggregate $iterator){}
/*. array .*/ function iterator_to_array(IteratorAggregate $iterator /*. , args .*/){}
/*. void .*/ function spl_autoload_call(/*. string .*/ $class_name)
	/*. throws LogicException .*/{}
/*. string .*/ function spl_autoload_extensions(/*. args .*/){}
/*. array[int]string .*/ function spl_autoload_functions(){}
/*. bool .*/ function spl_autoload_register(/*. args .*/)
	/*. throws LogicException .*/{}
/*. bool .*/ function spl_autoload_unregister(/*. mixed .*/ $autoload_function ){}
/*. void .*/ function spl_autoload(/*. string .*/ $class_name /*. , args .*/){}
/*. array[string]string .*/ function spl_classes(){}
/*. string .*/ function spl_mixed_hash(/*. mixed .*/ $obj){}


?>
